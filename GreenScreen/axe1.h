// File generated by "Obj2Header.exe" [Version 1.7] Author: L.Norri CD CGS Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _axe1_vertexcount_
const unsigned axe1_vertexcount = 90;
#define _axe1_vertexcount_
#endif
#ifndef _axe1_indexcount_
const unsigned axe1_indexcount = 174;
#define _axe1_indexcount_
#endif
#ifndef _axe1_materialcount_
const unsigned axe1_materialcount = 3;
#define _axe1_materialcount_
#endif
#ifndef _axe1_meshcount_
const unsigned axe1_meshcount = 3;
#define _axe1_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	float pos[3]; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	float uvw[3]; // D3D/Vulkan style top left 0,0 coordinate.
	float nrm[3]; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _axe1_data_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT axe1_data[90] =
{
	{	{ -0.422607f, 9.680225f, 0.731977f },	{ 0.630116f, 0.518793f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.845214f, 9.680225f, 0.000000f },	{ 0.578581f, 0.549430f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.422607f, 9.680225f, -0.731977f },	{ 0.579346f, 0.609378f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.422607f, 9.680225f, 0.731977f },	{ 0.682415f, 0.548105f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.845214f, 9.680225f, -0.000000f },	{ 0.683180f, 0.608053f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.422607f, 9.680225f, -0.731977f },	{ 0.631645f, 0.638690f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.419372f, 30.244028f, -0.720084f },	{ 0.631668f, 0.638828f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000001f }	},
	{	{ -0.419372f, 30.244028f, -0.720084f },	{ 0.579369f, 0.609516f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000001f }	},
	{	{ -0.838743f, 30.244028f, 0.006289f },	{ 0.578604f, 0.549568f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000001f }	},
	{	{ 0.838743f, 30.244028f, 0.006289f },	{ 0.683203f, 0.608191f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000001f }	},
	{	{ 0.419372f, 30.244028f, 0.732662f },	{ 0.682438f, 0.548243f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000001f }	},
	{	{ -0.419371f, 30.244028f, 0.732662f },	{ 0.630139f, 0.518931f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000001f }	},
	{	{ 0.422607f, 9.680225f, 0.731977f },	{ 0.202921f, 0.997604f, 0.000000f },	{ 0.000000f, -0.000033f, 1.000000f }	},
	{	{ 0.419372f, 30.244028f, 0.732662f },	{ 0.203069f, 0.008677f, 0.000000f },	{ 0.000000f, -0.000033f, 1.000000f }	},
	{	{ -0.419371f, 30.244028f, 0.732662f },	{ 0.244194f, 0.008677f, 0.000000f },	{ 0.000000f, -0.000033f, 1.000000f }	},
	{	{ -0.422607f, 9.680225f, 0.731977f },	{ 0.244342f, 0.997604f, 0.000000f },	{ 0.000000f, -0.000033f, 1.000000f }	},
	{	{ -0.422607f, 9.680225f, 0.731977f },	{ -0.004084f, 0.997604f, 0.000000f },	{ -0.866025f, 0.000120f, 0.500000f }	},
	{	{ -0.419371f, 30.244028f, 0.732662f },	{ -0.004231f, 0.008677f, 0.000000f },	{ -0.866025f, 0.000120f, 0.500000f }	},
	{	{ -0.838743f, 30.244028f, 0.006289f },	{ 0.037032f, 0.008677f, 0.000000f },	{ -0.866025f, 0.000120f, 0.500000f }	},
	{	{ -0.845214f, 9.680225f, 0.000000f },	{ 0.037328f, 0.997604f, 0.000000f },	{ -0.866025f, 0.000120f, 0.500000f }	},
	{	{ -0.845214f, 9.680225f, 0.000000f },	{ 0.037328f, 0.997604f, 0.000000f },	{ -0.866025f, 0.000425f, -0.500000f }	},
	{	{ -0.838743f, 30.244028f, 0.006289f },	{ 0.037032f, 0.008677f, 0.000000f },	{ -0.866025f, 0.000425f, -0.500000f }	},
	{	{ -0.419372f, 30.244028f, -0.720084f },	{ 0.078576f, 0.008677f, 0.000000f },	{ -0.866025f, 0.000425f, -0.500000f }	},
	{	{ -0.422607f, 9.680225f, -0.731977f },	{ 0.078725f, 0.997604f, 0.000000f },	{ -0.866026f, 0.000425f, -0.500000f }	},
	{	{ -0.422607f, 9.680225f, -0.731977f },	{ 0.078725f, 0.997604f, 0.000000f },	{ -0.000000f, 0.000578f, -1.000000f }	},
	{	{ -0.419372f, 30.244028f, -0.720084f },	{ 0.078576f, 0.008677f, 0.000000f },	{ -0.000000f, 0.000578f, -1.000000f }	},
	{	{ 0.419372f, 30.244028f, -0.720084f },	{ 0.120262f, 0.008677f, 0.000000f },	{ -0.000000f, 0.000578f, -1.000000f }	},
	{	{ 0.422607f, 9.680225f, -0.731977f },	{ 0.120113f, 0.997604f, 0.000000f },	{ -0.000000f, 0.000578f, -1.000000f }	},
	{	{ 0.422607f, 9.680225f, -0.731977f },	{ 0.120113f, 0.997604f, 0.000000f },	{ 0.866025f, 0.000425f, -0.500000f }	},
	{	{ 0.419372f, 30.244028f, -0.720084f },	{ 0.120262f, 0.008677f, 0.000000f },	{ 0.866025f, 0.000425f, -0.500000f }	},
	{	{ 0.838743f, 30.244028f, 0.006289f },	{ 0.161806f, 0.008677f, 0.000000f },	{ 0.866025f, 0.000425f, -0.500000f }	},
	{	{ 0.845214f, 9.680225f, -0.000000f },	{ 0.161509f, 0.997604f, 0.000000f },	{ 0.866025f, 0.000425f, -0.500000f }	},
	{	{ 0.845214f, 9.680225f, -0.000000f },	{ 0.161509f, 0.997604f, 0.000000f },	{ 0.866026f, 0.000120f, 0.500000f }	},
	{	{ 0.838743f, 30.244028f, 0.006289f },	{ 0.161806f, 0.008677f, 0.000000f },	{ 0.866026f, 0.000120f, 0.500000f }	},
	{	{ 0.419372f, 30.244028f, 0.732662f },	{ 0.203069f, 0.008677f, 0.000000f },	{ 0.866026f, 0.000120f, 0.500000f }	},
	{	{ 0.422607f, 9.680225f, 0.731977f },	{ 0.202921f, 0.997604f, 0.000000f },	{ 0.866026f, 0.000120f, 0.500000f }	},
	{	{ -1.327238f, 29.980053f, -1.119501f },	{ 0.943918f, 0.446809f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 1.327238f, 29.980053f, -1.119501f },	{ 0.943142f, 0.576650f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 1.331684f, 27.153084f, -1.119501f },	{ 0.804989f, 0.576042f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.331684f, 27.153084f, -1.119501f },	{ 0.805768f, 0.445767f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.759651f, 29.980053f, 1.707471f },	{ 0.330204f, 0.283518f, 0.000000f },	{ 0.000000f, 0.998739f, -0.050195f }	},
	{	{ 0.759651f, 29.980053f, 1.707471f },	{ 0.408426f, 0.283518f, 0.000000f },	{ 0.000000f, 0.998739f, -0.050195f }	},
	{	{ 1.327238f, 29.980053f, -1.119501f },	{ 0.437648f, 0.428982f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000001f }	},
	{	{ -1.327238f, 29.980053f, -1.119501f },	{ 0.300981f, 0.428982f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000001f }	},
	{	{ -1.331684f, 27.153084f, -1.119501f },	{ 0.298279f, 0.438053f, 0.000000f },	{ 0.000000f, -1.000000f, 0.000000f }	},
	{	{ 1.331684f, 27.153084f, -1.119501f },	{ 0.439130f, 0.438053f, 0.000000f },	{ 0.000000f, -1.000000f, 0.000000f }	},
	{	{ 0.810212f, 27.153084f, 1.707471f },	{ 0.411552f, 0.587554f, 0.000000f },	{ 0.000000f, -0.997192f, -0.074886f }	},
	{	{ -0.810212f, 27.153084f, 1.707471f },	{ 0.325857f, 0.587554f, 0.000000f },	{ 0.000000f, -0.997192f, -0.074886f }	},
	{	{ 1.327238f, 29.980053f, -1.119501f },	{ 0.943142f, 0.576650f, 0.000000f },	{ 0.981905f, 0.009553f, 0.189134f }	},
	{	{ 0.759651f, 29.980053f, 1.707471f },	{ 0.942471f, 0.714675f, 0.000000f },	{ 0.973390f, 0.008407f, 0.228999f }	},
	{	{ 0.810212f, 27.153084f, 1.707471f },	{ 0.804446f, 0.714067f, 0.000000f },	{ 0.973114f, 0.008373f, 0.230173f }	},
	{	{ 1.331684f, 27.153084f, -1.119501f },	{ 0.804989f, 0.576042f, 0.000000f },	{ 0.981905f, 0.009553f, 0.189134f }	},
	{	{ -0.759651f, 29.980053f, 1.707471f },	{ 0.944895f, 0.308785f, 0.000000f },	{ -0.973390f, 0.008407f, 0.228999f }	},
	{	{ -1.327238f, 29.980053f, -1.119501f },	{ 0.943918f, 0.446809f, 0.000000f },	{ -0.981905f, 0.009553f, 0.189134f }	},
	{	{ -1.331684f, 27.153084f, -1.119501f },	{ 0.805768f, 0.445767f, 0.000000f },	{ -0.981905f, 0.009553f, 0.189134f }	},
	{	{ -0.810212f, 27.153084f, 1.707471f },	{ 0.806872f, 0.307745f, 0.000000f },	{ -0.973114f, 0.008373f, 0.230173f }	},
	{	{ -0.348827f, 30.415621f, 3.204619f },	{ 0.351355f, 0.203279f, 0.000000f },	{ 0.000000f, 0.969486f, -0.245148f }	},
	{	{ 0.348827f, 30.415621f, 3.204619f },	{ 0.387274f, 0.203279f, 0.000000f },	{ 0.000000f, 0.969486f, -0.245148f }	},
	{	{ 0.348827f, 30.415621f, 3.204619f },	{ 0.963416f, 0.787865f, 0.000000f },	{ 0.985900f, 0.000638f, 0.167335f }	},
	{	{ 0.346547f, 26.507927f, 3.204619f },	{ 0.772625f, 0.787026f, 0.000000f },	{ 0.988983f, -0.000413f, 0.148030f }	},
	{	{ 0.346547f, 26.507927f, 3.204619f },	{ 0.387031f, 0.673770f, 0.000000f },	{ 0.000000f, -0.918361f, -0.395743f }	},
	{	{ -0.346547f, 26.507927f, 3.204619f },	{ 0.350378f, 0.673770f, 0.000000f },	{ 0.000000f, -0.918361f, -0.395743f }	},
	{	{ -0.346547f, 26.507927f, 3.204619f },	{ 0.775925f, 0.234411f, 0.000000f },	{ -0.988983f, -0.000413f, 0.148030f }	},
	{	{ -0.348827f, 30.415621f, 3.204619f },	{ 0.966712f, 0.235850f, 0.000000f },	{ -0.985900f, 0.000638f, 0.167335f }	},
	{	{ -0.216452f, 30.628092f, 4.592093f },	{ 0.358171f, 0.131794f, 0.000000f },	{ 0.000000f, 0.994477f, -0.104958f }	},
	{	{ 0.216452f, 30.628092f, 4.592093f },	{ 0.380459f, 0.131795f, 0.000000f },	{ 0.000000f, 0.994477f, -0.104958f }	},
	{	{ 0.216452f, 30.628092f, 4.592093f },	{ 0.973492f, 0.855654f, 0.000000f },	{ 0.995681f, -0.005880f, 0.092650f }	},
	{	{ 0.196167f, 24.328459f, 4.520875f },	{ 0.665931f, 0.850824f, 0.000000f },	{ 0.995631f, -0.011824f, 0.092628f }	},
	{	{ 0.196167f, 24.328459f, 4.520875f },	{ 0.379079f, 0.808418f, 0.000000f },	{ 0.000000f, -0.516970f, -0.856003f }	},
	{	{ -0.196167f, 24.328459f, 4.520875f },	{ 0.358330f, 0.808418f, 0.000000f },	{ 0.000000f, -0.516970f, -0.856003f }	},
	{	{ -0.346547f, 26.507927f, 3.204619f },	{ 0.350378f, 0.673770f, 0.000000f },	{ 0.000000f, -0.516970f, -0.856004f }	},
	{	{ 0.346547f, 26.507927f, 3.204619f },	{ 0.387031f, 0.673770f, 0.000000f },	{ 0.000000f, -0.516970f, -0.856004f }	},
	{	{ -0.196167f, 24.328459f, 4.520875f },	{ 0.670000f, 0.169344f, 0.000000f },	{ -0.995631f, -0.011824f, 0.092628f }	},
	{	{ -0.216452f, 30.628092f, 4.592093f },	{ 0.977596f, 0.168187f, 0.000000f },	{ -0.995681f, -0.005880f, 0.092650f }	},
	{	{ 0.000000f, 30.713829f, 7.231434f },	{ 0.369315f, -0.002703f, 0.000000f },	{ 0.000000f, 0.999473f, -0.032466f }	},
	{	{ 0.000000f, 30.713829f, 7.231434f },	{ 0.977111f, 0.984536f, 0.000000f },	{ 0.996022f, -0.007106f, 0.088822f }	},
	{	{ 0.000000f, 24.328459f, 6.515350f },	{ 0.665503f, 0.948203f, 0.000000f },	{ 0.995822f, -0.011259f, 0.090623f }	},
	{	{ 0.179123f, 23.116621f, 4.328257f },	{ 0.378177f, 0.873309f, 0.000000f },	{ 0.000000f, -0.646909f, -0.762567f }	},
	{	{ -0.000000f, 21.701889f, 5.528417f },	{ 0.368704f, 0.971422f, 0.000000f },	{ 0.000000f, -0.646909f, -0.762567f }	},
	{	{ -0.179123f, 23.116621f, 4.328257f },	{ 0.359232f, 0.873309f, 0.000000f },	{ 0.000000f, -0.646909f, -0.762567f }	},
	{	{ 0.000000f, 24.328459f, 6.515350f },	{ 0.670734f, 0.071967f, 0.000000f },	{ -0.995822f, -0.011259f, 0.090623f }	},
	{	{ 0.000000f, 30.713829f, 7.231434f },	{ 0.982754f, 0.039356f, 0.000000f },	{ -0.996022f, -0.007106f, 0.088822f }	},
	{	{ 0.179123f, 23.116621f, 4.328257f },	{ 0.378177f, 0.873309f, 0.000000f },	{ 0.000000f, 0.156977f, -0.987602f }	},
	{	{ -0.179123f, 23.116621f, 4.328257f },	{ 0.359232f, 0.873309f, 0.000000f },	{ 0.000000f, 0.156977f, -0.987602f }	},
	{	{ -0.196167f, 24.328459f, 4.520875f },	{ 0.358330f, 0.808418f, 0.000000f },	{ 0.000000f, 0.156977f, -0.987602f }	},
	{	{ 0.196167f, 24.328459f, 4.520875f },	{ 0.379079f, 0.808418f, 0.000000f },	{ 0.000000f, 0.156977f, -0.987602f }	},
	{	{ -0.179123f, 23.116621f, 4.328257f },	{ 0.610763f, 0.178303f, 0.000000f },	{ -0.994245f, -0.035479f, 0.101087f }	},
	{	{ -0.000000f, 21.701889f, 5.528417f },	{ 0.542133f, 0.119186f, 0.000000f },	{ -0.994245f, -0.035479f, 0.101087f }	},
	{	{ -0.000000f, 21.701889f, 5.528417f },	{ 0.537474f, 0.899452f, 0.000000f },	{ 0.994245f, -0.035479f, 0.101087f }	},
	{	{ 0.179123f, 23.116621f, 4.328257f },	{ 0.606805f, 0.841159f, 0.000000f },	{ 0.994245f, -0.035479f, 0.101087f }	},
};
#define _axe1_data_
#endif
#ifndef _axe1_indicies_
// Index Data follows: Sequential by mesh, Every Three Indicies == One Triangle.
const unsigned int axe1_indicies[174] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 3, 2,
	 5, 4, 2,
	 6, 7, 8,
	 9, 6, 8,
	 10, 9, 8,
	 11, 10, 8,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 18,
	 19, 16, 18,
	 20, 21, 22,
	 23, 20, 22,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 30,
	 31, 28, 30,
	 32, 33, 34,
	 35, 32, 34,
	 36, 37, 38,
	 39, 36, 38,
	 40, 41, 42,
	 43, 40, 42,
	 44, 45, 46,
	 47, 44, 46,
	 48, 49, 50,
	 51, 48, 50,
	 52, 53, 54,
	 55, 52, 54,
	 56, 57, 41,
	 40, 56, 41,
	 58, 59, 50,
	 49, 58, 50,
	 60, 61, 47,
	 46, 60, 47,
	 62, 63, 52,
	 55, 62, 52,
	 64, 65, 57,
	 56, 64, 57,
	 66, 67, 59,
	 58, 66, 59,
	 68, 69, 70,
	 71, 68, 70,
	 72, 73, 63,
	 62, 72, 63,
	 64, 74, 65,
	 75, 76, 67,
	 66, 75, 67,
	 77, 78, 79,
	 80, 81, 73,
	 72, 80, 73,
	 82, 83, 84,
	 85, 82, 84,
	 86, 87, 80,
	 72, 86, 80,
	 88, 89, 67,
	 76, 88, 67,
};
#define _axe1_indicies_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	float       Kd[3]; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	float       Ks[3]; // specular reflectivity
	float       Ns; // specular exponent
	float       Ka[3]; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	float       Tf[3]; // transmission filter
	float       Ni; // optical density (index of refraction)
	float       Ke[3]; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _axe1_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL axe1_materials[3] =
{
	{
		{{ 0.600000f, 0.600000f, 0.600000f },
		1.000000f,
		{ 0.200000f, 0.200000f, 0.200000f },
		500.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.500000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"default",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.500000f, 0.500000f, 0.500000f },
		1.000000f,
		{ 0.200000f, 0.200000f, 0.200000f },
		500.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		4},
		"initialShadingGroup",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.000000f, 0.000000f, 0.000000f },
		1.000000f,
		{ 0.200000f, 0.200000f, 0.200000f },
		500.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		4},
		"lambert5SG",
		"axeTexture.bmp",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _axe1_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _axe1_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indicies array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int axe1_batches[3][2] =
{
	{ 0, 0 },
	{ 0, 0 },
	{ 174, 0 },
};
#define _axe1_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _axe1_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH axe1_meshes[3] =
{
	{
		"default",
		0,
		0,
		0,
	},
	{
		"polySurface1",
		0,
		0,
		0,
	},
	{
		"polySurface1",
		174,
		0,
		2,
	},
};
#define _axe1_meshes_
#endif
